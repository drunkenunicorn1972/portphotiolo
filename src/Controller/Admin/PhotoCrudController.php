<?php

namespace App\Controller\Admin;

use App\Entity\Photo;
use App\Entity\Tag;
use App\Repository\TagRepository;
use App\Service\AiImageAnalyzer;
use App\Service\ExifExtractor;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ChoiceField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateTimeField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IntegerField;
use EasyCorp\Bundle\EasyAdminBundle\Field\NumberField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextareaField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;

class PhotoCrudController extends AbstractCrudController
{
    public function __construct(
        private ExifExtractor $exifExtractor,
        private AiImageAnalyzer $aiImageAnalyzer,
        private TagRepository $tagRepository
    ) {
    }

    public static function getEntityFqcn(): string
    {
        return Photo::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setEntityLabelInSingular('Photo')
            ->setEntityLabelInPlural('Photos')
            ->setSearchFields(['name', 'description', 'location'])
            ->setDefaultSort(['uploadedAt' => 'DESC']);
    }

    public function configureFields(string $pageName): iterable
    {
        $isNew = $pageName === Crud::PAGE_NEW;
        $isEdit = $pageName === Crud::PAGE_EDIT;

        yield IdField::new('id')
            ->hideOnForm();

        yield TextField::new('uuid')
            ->hideOnForm()
            ->formatValue(function ($value) {
                return $value ? $value->toRfc4122() : '';
            });

        // Show user on detail/index, but hide on forms (will be set automatically)
        yield AssociationField::new('user')
            ->hideOnForm();

        yield TextField::new('name')
            ->setRequired(true)
            ->setHelp($isNew ? 'Will be auto-generated by AI, but you can change it' : null);

        yield ImageField::new('filename')
            ->setBasePath('uploads/photos')
            ->setUploadDir('public/uploads/photos')
            ->setUploadedFileNamePattern('[randomhash].[extension]')
            ->setRequired($isNew)
            ->setLabel('Photo File');

        yield TextareaField::new('description')
            ->hideOnIndex()
            ->setHelp($isNew ? 'Will be auto-generated by AI, but you can change it' : null);

        yield IntegerField::new('viewCount')
            ->hideOnForm();

        yield DateTimeField::new('createdAt')
            ->setLabel('Date Taken')
            ->setFormTypeOption('disabled', true)
            ->setHelp('Auto-extracted from EXIF data')
            ->hideOnIndex();

        yield DateTimeField::new('uploadedAt')
            ->hideOnForm();

        // EXIF fields - always read-only
        yield TextField::new('copyright')
            ->setFormTypeOption('disabled', true)
            ->setHelp('Auto-extracted from EXIF data')
            ->hideOnIndex();

        yield TextField::new('device')
            ->setLabel('Camera/Device')
            ->setFormTypeOption('disabled', true)
            ->setHelp('Auto-extracted from EXIF data')
            ->hideOnIndex();

        yield TextField::new('location')
            ->setFormTypeOption('disabled', true)
            ->setHelp('Auto-extracted from EXIF data')
            ->hideOnIndex();

        yield NumberField::new('latitude')
            ->setNumDecimals(8)
            ->setFormTypeOption('disabled', true)
            ->setHelp('Auto-extracted from EXIF data')
            ->hideOnIndex();

        yield NumberField::new('longitude')
            ->setNumDecimals(8)
            ->setFormTypeOption('disabled', true)
            ->setHelp('Auto-extracted from EXIF data')
            ->hideOnIndex();

        yield NumberField::new('aperture')
            ->setNumDecimals(1)
            ->setLabel('Aperture (f-stop)')
            ->setFormTypeOption('disabled', true)
            ->setHelp('Auto-extracted from EXIF data')
            ->hideOnIndex();

        yield NumberField::new('focalLength')
            ->setNumDecimals(1)
            ->setLabel('Focal Length (mm)')
            ->setFormTypeOption('disabled', true)
            ->setHelp('Auto-extracted from EXIF data')
            ->hideOnIndex();

        yield TextField::new('exposureTime')
            ->setLabel('Shutter Speed')
            ->setFormTypeOption('disabled', true)
            ->setHelp('Auto-extracted from EXIF data')
            ->hideOnIndex();

        yield IntegerField::new('iso')
            ->setLabel('ISO')
            ->setFormTypeOption('disabled', true)
            ->setHelp('Auto-extracted from EXIF data')
            ->hideOnIndex();

        yield BooleanField::new('flash')
            ->setLabel('Flash Used')
            ->setFormTypeOption('disabled', true)
            ->setHelp('Auto-extracted from EXIF data')
            ->hideOnIndex();

        yield ChoiceField::new('viewPrivacy')
            ->setChoices([
                'Public' => 'public',
                'Friends' => 'friend',
                'Family' => 'family',
                'Private' => 'private',
            ])
            ->setRequired(true);

        yield IntegerField::new('likeCount')
            ->hideOnForm();

        yield ChoiceField::new('rating')
            ->setChoices([
                '1 Star' => 1,
                '2 Stars' => 2,
                '3 Stars' => 3,
                '4 Stars' => 4,
                '5 Stars' => 5,
            ])
            ->renderAsBadges([
                1 => 'danger',
                2 => 'warning',
                3 => 'info',
                4 => 'primary',
                5 => 'success',
            ])
            ->hideOnIndex();

        yield AssociationField::new('albums')
            ->autocomplete()
            ->setFormTypeOption('by_reference', false);

        yield AssociationField::new('tags')
            ->autocomplete()
            ->setFormTypeOption('by_reference', false)
            ->setHelp($isNew ? 'Will be auto-generated by AI, but you can change them' : null);
    }

    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        if (!$entityInstance instanceof Photo) {
            parent::persistEntity($entityManager, $entityInstance);
            return;
        }

        // Set the current user
        $entityInstance->setUser($this->getUser());

        // Process uploaded file
        if ($entityInstance->getFilename()) {
            $uploadDir = $this->getParameter('kernel.project_dir') . '/public/uploads/photos/';
            $filePath = $uploadDir . $entityInstance->getFilename();

            if (file_exists($filePath)) {
                // 1. Extract EXIF data first
                $exifData = $this->exifExtractor->extractExifData($filePath);
                $this->applyExifData($entityInstance, $exifData);

                // 2. Analyze image with AI for name, description, and tags
                $aiProvider = $_ENV['AI_PROVIDER'] ?? 'openai';

                $aiData = match($aiProvider) {
                    'openai' => $this->aiImageAnalyzer->analyzeImageWithOpenAI($entityInstance->getFilename()),
                    'google' => $this->aiImageAnalyzer->analyzeImageWithGoogleVision($entityInstance->getFilename()),
                    default => $this->aiImageAnalyzer->analyzeImage($entityInstance->getFilename()),
                };

                // Apply AI-generated data only if fields are empty
                if (empty($entityInstance->getName()) && !empty($aiData['name'])) {
                    $entityInstance->setName($aiData['name']);
                }

                if (empty($entityInstance->getDescription()) && !empty($aiData['description'])) {
                    $entityInstance->setDescription($aiData['description']);
                }

                // Process AI-generated tags
                if (!empty($aiData['tags'])) {
                    $this->processTags($entityInstance, $aiData['tags'], $entityManager);
                }
            }
        }

        parent::persistEntity($entityManager, $entityInstance);
    }

    public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        if (!$entityInstance instanceof Photo) {
            parent::updateEntity($entityManager, $entityInstance);
            return;
        }

        // Check if a new file was uploaded during edit
        $uploadDir = $this->getParameter('kernel.project_dir') . '/public/uploads/photos/';
        $filePath = $uploadDir . $entityInstance->getFilename();

        if (file_exists($filePath)) {
            $fileModTime = filemtime($filePath);
            $uploadTime = $entityInstance->getUploadedAt()?->getTimestamp();

            // If file was modified after upload time, it's a new upload
            if ($uploadTime && $fileModTime > $uploadTime) {
                // Re-extract EXIF data
                $exifData = $this->exifExtractor->extractExifData($filePath);
                $this->applyExifData($entityInstance, $exifData);

                // Re-analyze with AI (but keep existing name/description if user changed them)
                $aiProvider = $_ENV['AI_PROVIDER'] ?? 'openai';

                $aiData = match($aiProvider) {
                    'openai' => $this->aiImageAnalyzer->analyzeImageWithOpenAI($entityInstance->getFilename()),
                    'google' => $this->aiImageAnalyzer->analyzeImageWithGoogleVision($entityInstance->getFilename()),
                    default => $this->aiImageAnalyzer->analyzeImage($entityInstance->getFilename()),
                };

                // Update tags with AI suggestions (merge with existing)
                if (!empty($aiData['tags'])) {
                    $this->processTags($entityInstance, $aiData['tags'], $entityManager);
                }
            }
        }

        parent::updateEntity($entityManager, $entityInstance);
    }

    private function applyExifData(Photo $photo, array $exifData): void
    {
        if ($exifData['device']) {
            $photo->setDevice($exifData['device']);
        }
        if ($exifData['copyright']) {
            $photo->setCopyright($exifData['copyright']);
        }
        if ($exifData['latitude']) {
            $photo->setLatitude($exifData['latitude']);
        }
        if ($exifData['longitude']) {
            $photo->setLongitude($exifData['longitude']);
        }
        if ($exifData['aperture']) {
            $photo->setAperture($exifData['aperture']);
        }
        if ($exifData['focalLength']) {
            $photo->setFocalLength($exifData['focalLength']);
        }
        if ($exifData['exposureTime']) {
            $photo->setExposureTime($exifData['exposureTime']);
        }
        if ($exifData['iso']) {
            $photo->setIso($exifData['iso']);
        }
        $photo->setFlash($exifData['flash']);

        if ($exifData['createdAt']) {
            $photo->setCreatedAt($exifData['createdAt']);
        }
    }

    private function processTags(Photo $photo, array $tagNames, EntityManagerInterface $entityManager): void
    {
        foreach ($tagNames as $tagName) {
            $tagName = trim($tagName);
            if (empty($tagName)) {
                continue;
            }

            // Find or create tag
            $tag = $this->tagRepository->findOneBy(['name' => $tagName]);
            if (!$tag) {
                $tag = new Tag();
                $tag->setName($tagName);
                $entityManager->persist($tag);
            }

            // Add tag to photo if not already present
            if (!$photo->getTags()->contains($tag)) {
                $photo->addTag($tag);
            }
        }
    }
}
